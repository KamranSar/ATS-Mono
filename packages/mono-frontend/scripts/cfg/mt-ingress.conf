# user  nginx;
worker_processes  auto;
# Number of file descriptors used for nginx
# The limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

# Can be one of the following: debug, info, notice, warn, error, crit, alert, emerg
error_log  /opt/bitnami/nginx/logs/error.log  error;
pid        /opt/bitnami/nginx/tmp/nginx.pid;

events {
    # Determines how many clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)# determines how much clients will be served per worker
    worker_connections  4096;
    # Optimized to serve many clients with each thread, essential for Linux
    use epoll;
    # Accept as many connections as possible, may flood worker connections if set too low
    multi_accept on;
}

http {
    resolver            8.8.8.8;
    include             /opt/bitnami/nginx/conf/mime.types;
    default_type        application/octet-stream;

    # Timeout annd Keepalive settings
    # Allow the server to close connection on non-responding clients, this will free up memory
    reset_timedout_connection   on;
    # Client request timeout in seconds -- default 60s
    client_body_timeout         10s;
    client_header_timeout       10s;
    # Sets maximum timeout (seconds) for transmitting a response to the client -- default 60s
    # The timeout is set only between two successive write operations, not for the transmission of the whole response. 
    # If the client does not receive anything within this time, the connection is closed.
    send_timeout                4s;
    # Sets maximum time (seconds) a keep-alive Client connection will stay open on the Server side -- default 75s
    keepalive_timeout           65s;
    # Sets the maximum number of Client requests that can be served through one keep-alive connection. 
    # After the maximum number of Client requests are made, the connection is closed.
    keepalive_requests          100000;

    # Rate Limiting Zones (implemeted in server or location block)
    # Zone "Zauth" can hold up to 160,000 (10m) unique IP addresses and a 
    # rate-limit of 10 requests per second (10r/s)
    limit_req_zone $binary_remote_addr zone=Zauth:10m rate=10r/s;
    # Zone "Zweb" can hold up to 160,000 (10m) unique IP addresses and a 
    # rate-limit of 20 requests per second (20r/s)
    limit_req_zone $binary_remote_addr zone=Zweb:10m rate=20r/s;
    # Zone "Zapi" can hold up to 160,000 (10m) unique IP addresses and a 
    # rate-limit of 15 requests per second (15r/s)
    limit_req_zone $binary_remote_addr zone=Zapi:10m rate=15r/s;

    # Logging Settings
    # Nginx - logging milliseconds in ISO8601 format
    # https://thatsamguy.com/nginx-iso8601-time-format/
    map $time_iso8601 $time_iso8601_p1 {
     ~([^+]+) $1;
    }
    map $time_iso8601 $time_iso8601_p2 {
      ~\+([0-9:]+)$ $1;
    }
    map $msec $millisec {
      ~\.([0-9]+)$ $1;
    }
    log_format  json  escape=json '{ ' 
      '"timestamp":"$time_iso8601_p1.$millisec+$time_iso8601_p2", '
      '"remoteAddr":"$remote_addr", "reqURL":"$request", "scheme":"$scheme", "statusCd":"$status", '
      '"requestLen":"$request_length", "replyLen":"$body_bytes_sent", "userAgent":"$http_user_agent", '
      '"httpReferer:"$http_referer", "xForwardedFor":"$http_x_forwarded_for", "responseTime":"$request_time"'
      ' }';
#    log_format  logfmt  '[$time_iso8601_p1.$millisec+$time_iso8601_p2] - RemoteAddr: $remote_addr - ReqURL: $request", '
#      'Scheme: $scheme, StatusCd: $status, RequestLen: $request_length, ReplyLen: $body_bytes_sent, UserAgent: "$http_user_agent", '
#      'HttpReferer: "$http_referer", X_ForwardedFor: "$http_x_forwarded_for", ResponseTime: $request_time';
    access_log  /opt/bitnami/nginx/logs/access.log   json;

    # Copies data between one FD and other from within the kernel - faster than read() + write()
    sendfile       on;
    # Send headers in one piece, it is better than sending them one by one
    tcp_nopush     on;
    # Don't buffer data sent, good for small data bursts in real time
    tcp_nodelay    on;

    # This server block is for http to https redirection, should we ever need it.
    server {
        server_name localhost;
        listen 8080;
        limit_req zone=Zweb;
        return 301 https://$host$request_uri;
    }
    #
    # This is the Main server block
    server {
        listen                  8443 ssl http2;
        server_name             localhost;
        client_max_body_size    50M;

        # SSL session cache optimization
        ssl_session_cache   shared:SSL:40m;
        ssl_session_timeout 4h;

        # SSL Cert & Encryption settings
        ssl_certificate     bitnami/certs/mt-ingress.crt;
        ssl_certificate_key bitnami/certs/mt-ingress.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers         ECDH+AESGCM:ECDH+AES256-CBC:ECDH+AES128-CBC:DH+3DES:!ADH:!AECDH:!MD5;
        ssl_session_tickets on;

        # GZIP settings
        gzip                on;
        gunzip              on;
        gzip_types          text/plain application/xml;
        gzip_proxied        no-cache no-store private expired auth;
        gzip_min_length     2048;
        gzip_comp_level     1;
        gzip_vary           on;
        gzip_disable        msie6;

        # Enable HSTS (HTTP Strict Transport Security)
        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        # http://nginx.org/en/docs/http/ngx_http_headers_module.html
        # enabling HSTS(HTTP Strict Transport Security)
        # https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        #
        # Root route will default to serving Auth web-content
        location / {
            limit_req zone=Zweb;
            # If user agent is blank, this is a ping, therefore:
            # 1) Don't serve a file and save our bandwidth
            # 2) Don't log the request/response 
            if ($http_user_agent = "") {
               add_header Content-Type text/plain;
               access_log off;
               return 200 'pong';
            }
            root   /var/www/main/default;
            index  index.html index.htm;
        }

        #
        # SPA Content Location Blocks
        # Each UI app will have 2 location blocks. The first block attempts to find the SPA content 
        # using several methods and forwards the NotFound condition to the next block with the @ prefix. 
        # The app NotFound block will rewrite the URL appending /index.html to it and breaks out of 
        # all remaining searches to return the impled 301 (redirect) to the new URL which will be 
        # interpreted by the SPA app to mean "use local routing" to look for the desired content.
        #
        # App #1
        location /app {
            limit_req zone=Zweb burst=40 nodelay;
            root /var/www/main;
            index  index.html index.htm;
            try_files $uri $uri/ $uri.html  @app;
        }
        location @app {
            root /var/www/main/app;
            rewrite ^ /index.html break;
        }
        # App #2
        location /dist {
            limit_req zone=Zweb burst=40 nodelay;
            root /var/www/main;
            index  index.html index.htm;
            try_files $uri $uri/ $uri.html  @dist;
        }
        location @dist {
            root /var/www/main/dist;
            rewrite ^ /index.html break;
        }

        #
        # MiddleTier Monitor Location Blocks
        # Just redirect to the main node in each cluster
        # location /appsdev.cdcr.ca.gov/mon {
        #     limit_req zone=Zweb burst=1000 nodelay;
        #     return 301  http://fdctddkrmtm01.accounts.cdcr.ca.gov:888;
        # }
        # location /appstest.cdcr.ca.gov/mon {
        #     limit_req zone=Zweb burst=1000 nodelay;
        #     return 301  http://fdctudkrmtm01.accounts.cdcr.ca.gov:888;
        # }
        # location /appspoc.cdcr.ca.gov/mon {
        #     limit_req zone=Zweb burst=1000 nodelay;
        #     return 301  http://fdcstdkrmtm01.accounts.cdcr.ca.gov:888;
        # }
        # location /apps.cdcr.ca.gov/mon {
        #     limit_req zone=Zweb burst=1000 nodelay;
        #     return 301  http://fdcdkrmtm01.accounts.cdcr.ca.gov:888;
        # }

        # URL Rewrite - Strip out "rest/" from the URL and using the "last" flag 
        # searches for a new location matching the changed URI.
        # location ~ ^/(rest) {
        #     limit_req zone=Zapi burst=30 nodelay;
        #     rewrite ^/rest(.*)$  $1  last;
        # }

        #
        # MiddleTier Core Feathers Server Location Blocks
        #
        # MT Auth Server - All messaging initially goes thru this server due 
        # to the implmentation of Feathers Distribution
        location ~ ^/(api|docs) {
            limit_req zone=Zauth burst=20 nodelay;
            proxy_pass http://localhost:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_protocol_addr;
            # strip specific headers:
            proxy_set_header X-Internal-Request "";
        }

        #
        # Redirect server error pages to the static page /50x.html
        #
        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
           limit_req zone=Zweb;
           root    /app;
        }
    }    
}
